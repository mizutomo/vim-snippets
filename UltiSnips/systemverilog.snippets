priority -50

extends verilog

# Foreach Loop
snippet forea "foreach"
foreach (${1}) begin
	${0}
end
endsnippet

# Do-while statement
snippet dowh "do-while"
do begin
	${0}
end while (${1});
endsnippet

# Combinational always block
snippet alc "always_comb"
always_comb begin ${1:: statement_label}
	${0}
end $1
endsnippet

# Sequential logic
snippet alff "always_ff"
always_ff @(posedge ${1:clk}) begin ${2:: statement_label}
	${0}
end $2
endsnippet

# Latched logic
snippet all "always_latch"
always_latch begin ${1:: statement_label}
	${0}
end $1
endsnippet

# Class
snippet cl "class"
class ${1:class_name};
	// data or class properties
	${0}

	// initialization
	function new();
	endfunction : new

endclass : $1
endsnippet

# Typedef structure
snippet types "typedef struct"
typedef struct {
	${0}
} ${1:name_t};
endsnippet

# Program block
snippet prog "program"
program ${1:program_name} ();
	${0}
endprogram : $1
endsnippet

# Interface block
snippet intf "interface"
interface ${1:program_name} ();
	// nets
	${0}
	// clocking

	// modports

endinterface : $1
endsnippet

# Clocking Block
snippet clock "clocking"
clocking ${1:clocking_name} @(${2:posedge} ${3:clk});
	${0}
endclocking : $1
endsnippet

# Covergroup construct
snippet cg "covergroup"
covergroup ${1:group_name} @(${2:posedge} ${3:clk});
	${0}
endgroup : $1
endsnippet

# Package declaration
snippet pkg "package"
package ${1:package_name};
	${0}
endpackage : $1
endsnippet

# vim:ft=snippets:
